{"pageProps":{"postMetadata":{"title":"Whiteboard Image Enhancement using OpenCV","description":"Enhance whiteboard images taken from mobile using OpenCV.","imgName":"whiteboard-enhance/whiteboard-image-enhancement.jpg","date":"Oct 19, 2021","tags":["image-processing","opencv"],"keywords":["whiteboard","whiteboard-enhance","image-enhance","image-processing","opencv","python","difference-of-guassian","dog","contrast-stretch","color-balance"],"id":"whiteboard-image-enhancement-opencv-python"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    hr: \"hr\",\n    h3: \"h3\",\n    span: \"span\",\n    math: \"math\",\n    semantics: \"semantics\",\n    mrow: \"mrow\",\n    msub: \"msub\",\n    mi: \"mi\",\n    annotation: \"annotation\",\n    mn: \"mn\",\n    em: \"em\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/whiteboard-image-enhancement.jpg\",\n        alt: \"Whiteboard image enhancement in Python\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Whiteboard image enhancement using OpenCV\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whiteboard images generally contain less contrast and low brightness as they would be captured in mobile under normal room light conditions. Enhancing whiteboard images makes text readable and gives an image with high contrast and brightness.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We will apply different image-processing techniques to enhance whiteboard images using OpenCV in Python. From this \", _jsx(_components.a, {\n        href: \"https://gist.github.com/lelandbatey/8677901\",\n        children: \"whiteboard-cleaner\"\n      }), \" gist that enhances whiteboard images using \", _jsx(_components.a, {\n        href: \"https://imagemagick.org/\",\n        children: \"ImageMagick\"\n      }), \", we will implement those ImageMagick methods in Python.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In that script, the following ImageMagick functions were used to enhance whiteboard images\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"-morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Above command applies image enhancing functions in order\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"-morphology Convolve DoG:15, 100, 0\"\n        }), \": Difference of Gaussian (DoG) with kernel_radius=15, sigma1=100, and sigma2=0\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"-negate\"\n        }), \": Negative of image\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"-normalize\"\n        }), \": Contrast stretch image with black=0.15% and white=0.05%\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"-blur 0x1\"\n        }), \": Gaussian blur with sigma=1\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"**-level 60%,91%,0.1: Stretch image with black=60% and white=91%, and Gamma correction by gamma=0.1\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As I found some difficulty for exactly converting the ImageMagick C code to Python, I have changed the order and parameters that would give close results.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"We will apply series of image-processing methods and effects to enhance whiteboard images in the following order\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Difference of Gaussian (DoG)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Negative effect\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Contrast Stretching\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Gaussian blur\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Gamma correction\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Color balance\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find the full code in my Github repository \", _jsx(_components.a, {\n        href: \"https://github.com/santhalakshminarayana/whiteboard-image-enhance\",\n        children: \"whiteboard-image-enhance\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Import packages and read image\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"import cv2\\nimport numpy as np\\n\\nimg = cv2.imread('input.jpg')\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/whiteboard-image.jpg\",\n        alt: \"Whiteboard image input:=:70:=:Input Whiteboard image\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Difference of Gaussian (DoG)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Difference_of_Gaussians\",\n        children: \"Difference of Gaussians (DoG)\"\n      }), \" is the difference of two Gaussian kernel convoluted images. DoG image is obtained by subtracting two Gaussian blurred images with different kernel radius and variance.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Normally \", _jsx(_components.span, {\n        className: \"math math-inline\",\n        children: _jsxs(_components.span, {\n          className: \"katex\",\n          children: [_jsx(_components.span, {\n            className: \"katex-mathml\",\n            children: _jsx(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: _jsxs(_components.semantics, {\n                children: [_jsx(_components.mrow, {\n                  children: _jsxs(_components.msub, {\n                    children: [_jsx(_components.mi, {\n                      children: \"I\"\n                    }), _jsxs(_components.mrow, {\n                      children: [_jsx(_components.mi, {\n                        children: \"d\"\n                      }), _jsx(_components.mi, {\n                        children: \"o\"\n                      }), _jsx(_components.mi, {\n                        children: \"g\"\n                      })]\n                    })]\n                  })\n                }), _jsx(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"I_{dog}\"\n                })]\n              })\n            })\n          }), _jsx(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: _jsxs(_components.span, {\n              className: \"base\",\n              children: [_jsx(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.9694em\",\n                  verticalAlign: \"-0.2861em\"\n                }\n              }), _jsxs(_components.span, {\n                className: \"mord\",\n                children: [_jsx(_components.span, {\n                  className: \"mord mathnormal\",\n                  style: {\n                    marginRight: \"0.07847em\"\n                  },\n                  children: \"I\"\n                }), _jsx(_components.span, {\n                  className: \"msupsub\",\n                  children: _jsxs(_components.span, {\n                    className: \"vlist-t vlist-t2\",\n                    children: [_jsxs(_components.span, {\n                      className: \"vlist-r\",\n                      children: [_jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.3361em\"\n                        },\n                        children: _jsxs(_components.span, {\n                          style: {\n                            top: \"-2.55em\",\n                            marginLeft: \"-0.0785em\",\n                            marginRight: \"0.05em\"\n                          },\n                          children: [_jsx(_components.span, {\n                            className: \"pstrut\",\n                            style: {\n                              height: \"2.7em\"\n                            }\n                          }), _jsx(_components.span, {\n                            className: \"sizing reset-size6 size3 mtight\",\n                            children: _jsxs(_components.span, {\n                              className: \"mord mtight\",\n                              children: [_jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                children: \"d\"\n                              }), _jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                children: \"o\"\n                              }), _jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.03588em\"\n                                },\n                                children: \"g\"\n                              })]\n                            })\n                          })]\n                        })\n                      }), _jsx(_components.span, {\n                        className: \"vlist-s\",\n                        children: \"​\"\n                      })]\n                    }), _jsx(_components.span, {\n                      className: \"vlist-r\",\n                      children: _jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.2861em\"\n                        },\n                        children: _jsx(_components.span, {})\n                      })\n                    })]\n                  })\n                })]\n              })]\n            })\n          })]\n        })\n      }), \" (DoG of image) is calculated by subtracting \", _jsx(_components.span, {\n        className: \"math math-inline\",\n        children: _jsxs(_components.span, {\n          className: \"katex\",\n          children: [_jsx(_components.span, {\n            className: \"katex-mathml\",\n            children: _jsx(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: _jsxs(_components.semantics, {\n                children: [_jsx(_components.mrow, {\n                  children: _jsxs(_components.msub, {\n                    children: [_jsx(_components.mi, {\n                      children: \"I\"\n                    }), _jsxs(_components.mrow, {\n                      children: [_jsx(_components.mi, {\n                        children: \"g\"\n                      }), _jsx(_components.mn, {\n                        children: \"1\"\n                      })]\n                    })]\n                  })\n                }), _jsx(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"I_{g1}\"\n                })]\n              })\n            })\n          }), _jsx(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: _jsxs(_components.span, {\n              className: \"base\",\n              children: [_jsx(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.9694em\",\n                  verticalAlign: \"-0.2861em\"\n                }\n              }), _jsxs(_components.span, {\n                className: \"mord\",\n                children: [_jsx(_components.span, {\n                  className: \"mord mathnormal\",\n                  style: {\n                    marginRight: \"0.07847em\"\n                  },\n                  children: \"I\"\n                }), _jsx(_components.span, {\n                  className: \"msupsub\",\n                  children: _jsxs(_components.span, {\n                    className: \"vlist-t vlist-t2\",\n                    children: [_jsxs(_components.span, {\n                      className: \"vlist-r\",\n                      children: [_jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.3011em\"\n                        },\n                        children: _jsxs(_components.span, {\n                          style: {\n                            top: \"-2.55em\",\n                            marginLeft: \"-0.0785em\",\n                            marginRight: \"0.05em\"\n                          },\n                          children: [_jsx(_components.span, {\n                            className: \"pstrut\",\n                            style: {\n                              height: \"2.7em\"\n                            }\n                          }), _jsx(_components.span, {\n                            className: \"sizing reset-size6 size3 mtight\",\n                            children: _jsxs(_components.span, {\n                              className: \"mord mtight\",\n                              children: [_jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.03588em\"\n                                },\n                                children: \"g\"\n                              }), _jsx(_components.span, {\n                                className: \"mord mtight\",\n                                children: \"1\"\n                              })]\n                            })\n                          })]\n                        })\n                      }), _jsx(_components.span, {\n                        className: \"vlist-s\",\n                        children: \"​\"\n                      })]\n                    }), _jsx(_components.span, {\n                      className: \"vlist-r\",\n                      children: _jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.2861em\"\n                        },\n                        children: _jsx(_components.span, {})\n                      })\n                    })]\n                  })\n                })]\n              })]\n            })\n          })]\n        })\n      }), \" and \", _jsx(_components.span, {\n        className: \"math math-inline\",\n        children: _jsxs(_components.span, {\n          className: \"katex\",\n          children: [_jsx(_components.span, {\n            className: \"katex-mathml\",\n            children: _jsx(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: _jsxs(_components.semantics, {\n                children: [_jsx(_components.mrow, {\n                  children: _jsxs(_components.msub, {\n                    children: [_jsx(_components.mi, {\n                      children: \"I\"\n                    }), _jsxs(_components.mrow, {\n                      children: [_jsx(_components.mi, {\n                        children: \"g\"\n                      }), _jsx(_components.mn, {\n                        children: \"2\"\n                      })]\n                    })]\n                  })\n                }), _jsx(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"I_{g2}\"\n                })]\n              })\n            })\n          }), _jsx(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: _jsxs(_components.span, {\n              className: \"base\",\n              children: [_jsx(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.9694em\",\n                  verticalAlign: \"-0.2861em\"\n                }\n              }), _jsxs(_components.span, {\n                className: \"mord\",\n                children: [_jsx(_components.span, {\n                  className: \"mord mathnormal\",\n                  style: {\n                    marginRight: \"0.07847em\"\n                  },\n                  children: \"I\"\n                }), _jsx(_components.span, {\n                  className: \"msupsub\",\n                  children: _jsxs(_components.span, {\n                    className: \"vlist-t vlist-t2\",\n                    children: [_jsxs(_components.span, {\n                      className: \"vlist-r\",\n                      children: [_jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.3011em\"\n                        },\n                        children: _jsxs(_components.span, {\n                          style: {\n                            top: \"-2.55em\",\n                            marginLeft: \"-0.0785em\",\n                            marginRight: \"0.05em\"\n                          },\n                          children: [_jsx(_components.span, {\n                            className: \"pstrut\",\n                            style: {\n                              height: \"2.7em\"\n                            }\n                          }), _jsx(_components.span, {\n                            className: \"sizing reset-size6 size3 mtight\",\n                            children: _jsxs(_components.span, {\n                              className: \"mord mtight\",\n                              children: [_jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.03588em\"\n                                },\n                                children: \"g\"\n                              }), _jsx(_components.span, {\n                                className: \"mord mtight\",\n                                children: \"2\"\n                              })]\n                            })\n                          })]\n                        })\n                      }), _jsx(_components.span, {\n                        className: \"vlist-s\",\n                        children: \"​\"\n                      })]\n                    }), _jsx(_components.span, {\n                      className: \"vlist-r\",\n                      children: _jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.2861em\"\n                        },\n                        children: _jsx(_components.span, {})\n                      })\n                    })]\n                  })\n                })]\n              })]\n            })\n          })]\n        })\n      }), \" which are convoluted images with two different Gaussian kernels. But ImageMagick applies convolution after subtracting and scaling two gaussian kernels.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, we will first subtract two different Gaussian kernels, scale and normalize the dog-kernel to the zero-summing kernel (sum of all elements ~ 0.0)  and then apply convolution.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"def normalize_kernel(kernel, k_width, k_height, scaling_factor = 1.0):\\n    '''Zero-summing normalize kernel'''\\n    \\n    K_EPS = 1.0e-12\\n    # positive and negative sum of kernel values\\n    pos_range, neg_range = 0, 0\\n    for i in range(k_width * k_height):\\n        if abs(kernel[i]) < K_EPS:\\n            kernel[i] = 0.0\\n        if kernel[i] < 0:\\n            neg_range += kernel[i]\\n        else:\\n            pos_range += kernel[i]\\n    \\n    # scaling factor for positive and negative range\\n    pos_scale, neg_scale = pos_range, -neg_range\\n    if abs(pos_range) >= K_EPS:\\n        pos_scale = pos_range\\n    else:\\n        pos_sacle = 1.0\\n    if abs(neg_range) >= K_EPS:\\n        neg_scale = 1.0\\n    else:\\n        neg_scale = -neg_range\\n        \\n    pos_scale = scaling_factor / pos_scale\\n    neg_scale = scaling_factor / neg_scale\\n    \\n    # scale kernel values for zero-summing kernel\\n    for i in range(k_width * k_height):\\n        if (not np.nan == kernel[i]):\\n            kernel[i] *= pos_scale if kernel[i] >= 0 else neg_scale\\n            \\n    return kernel\\n\\ndef dog(img, k_size, sigma_1, sigma_2):\\n    '''Difference of Gaussian by subtracting kernel 1 and kernel 2'''\\n    \\n    k_width = k_height = k_size\\n    x = y = (k_width - 1) // 2\\n    kernel = np.zeros(k_width * k_height)\\n    \\n    # first gaussian kernal\\n    if sigma_1 > 0:\\n        co_1 = 1 / (2 * sigma_1 * sigma_1)\\n        co_2 = 1 / (2 * np.pi * sigma_1 * sigma_1)\\n        i = 0\\n        for v in range(-y, y + 1):\\n            for u in range(-x, x + 1):\\n                kernel[i] = np.exp(-(u*u + v*v) * co_1) * co_2\\n                i += 1\\n    # unity kernel\\n    else:\\n        kernel[x + y * k_width] = 1.0\\n    \\n    # subtract second gaussian from kernel\\n    if sigma_2 > 0:\\n        co_1 = 1 / (2 * sigma_2 * sigma_2)\\n        co_2 = 1 / (2 * np.pi * sigma_2 * sigma_2)\\n        i = 0\\n        for v in range(-y, y + 1):\\n            for u in range(-x, x + 1):\\n                kernel[i] -= np.exp(-(u*u + v*v) * co_1) * co_2\\n                i += 1\\n    # unity kernel\\n    else:\\n        kernel[x + y * k_width] -= 1.0\\n    \\n    # zero-normalize scling kernel with scaling factor 1.0\\n    norm_kernel = normalize_kernel(kernel, k_width, k_height, scaling_factor = 1.0)\\n    \\n    # apply filter with norm_kernel\\n    return cv2.filter2D(img, -1, norm_kernel.reshape(k_width, k_height))\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Get Difference of Gaussian (DoG) for image by calling \", _jsx(_components.em, {\n        children: \"dog()\"\n      }), \" function with \", _jsx(_components.strong, {\n        children: \"radius = 15, sigma_1 = 100, sigma_2 = 0\"\n      }), \". Here \", _jsx(_components.strong, {\n        children: \"radius = 15\"\n      }), \" for both kernels, for first kernel, \", _jsx(_components.strong, {\n        children: \"sigma = 100\"\n      }), \", and for second kernel, \", _jsx(_components.strong, {\n        children: \"sigma = 0\"\n      }), \". Kernel with \", _jsx(_components.strong, {\n        children: \"sigma = 0\"\n      }), \" creates unity kernel means convolution with this kernel gives same image.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"dog_img = dog(img, 15, 100, 0)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After applying DoG, the resultant image looks like\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/difference-of-gaussian.jpg\",\n        alt: \"Difference of Gaussian (DoG) Image:=:70:=:Difference of Gaussian (DoG) image\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Negative Image\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For \", _jsx(_components.span, {\n        className: \"math math-inline\",\n        children: _jsxs(_components.span, {\n          className: \"katex\",\n          children: [_jsx(_components.span, {\n            className: \"katex-mathml\",\n            children: _jsx(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: _jsxs(_components.semantics, {\n                children: [_jsx(_components.mrow, {\n                  children: _jsxs(_components.msub, {\n                    children: [_jsx(_components.mi, {\n                      children: \"I\"\n                    }), _jsxs(_components.mrow, {\n                      children: [_jsx(_components.mi, {\n                        children: \"d\"\n                      }), _jsx(_components.mi, {\n                        children: \"o\"\n                      }), _jsx(_components.mi, {\n                        children: \"g\"\n                      })]\n                    })]\n                  })\n                }), _jsx(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"I_{dog}\"\n                })]\n              })\n            })\n          }), _jsx(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: _jsxs(_components.span, {\n              className: \"base\",\n              children: [_jsx(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.9694em\",\n                  verticalAlign: \"-0.2861em\"\n                }\n              }), _jsxs(_components.span, {\n                className: \"mord\",\n                children: [_jsx(_components.span, {\n                  className: \"mord mathnormal\",\n                  style: {\n                    marginRight: \"0.07847em\"\n                  },\n                  children: \"I\"\n                }), _jsx(_components.span, {\n                  className: \"msupsub\",\n                  children: _jsxs(_components.span, {\n                    className: \"vlist-t vlist-t2\",\n                    children: [_jsxs(_components.span, {\n                      className: \"vlist-r\",\n                      children: [_jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.3361em\"\n                        },\n                        children: _jsxs(_components.span, {\n                          style: {\n                            top: \"-2.55em\",\n                            marginLeft: \"-0.0785em\",\n                            marginRight: \"0.05em\"\n                          },\n                          children: [_jsx(_components.span, {\n                            className: \"pstrut\",\n                            style: {\n                              height: \"2.7em\"\n                            }\n                          }), _jsx(_components.span, {\n                            className: \"sizing reset-size6 size3 mtight\",\n                            children: _jsxs(_components.span, {\n                              className: \"mord mtight\",\n                              children: [_jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                children: \"d\"\n                              }), _jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                children: \"o\"\n                              }), _jsx(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.03588em\"\n                                },\n                                children: \"g\"\n                              })]\n                            })\n                          })]\n                        })\n                      }), _jsx(_components.span, {\n                        className: \"vlist-s\",\n                        children: \"​\"\n                      })]\n                    }), _jsx(_components.span, {\n                      className: \"vlist-r\",\n                      children: _jsx(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.2861em\"\n                        },\n                        children: _jsx(_components.span, {})\n                      })\n                    })]\n                  })\n                })]\n              })]\n            })\n          })]\n        })\n      }), \", get a negative image which is just an inversion of colors (255 - image).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"def negate(img):\\n    '''Negative of image'''\\n    \\n    return cv2.bitwise_not(img)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"negative_img = negate(dog_img)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The result of the inversion image is\\n\", _jsx(_components.img, {\n        src: \"whiteboard-enhance/negative.jpg\",\n        alt: \"Negative image:=:70:=:Negative image\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Image content is not much visible as we inverted an image whose most of the pixels are black. So, to improve the contrast, we apply contrast-stretch enhancement for the negative image.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Contrast Stretching\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Contrast stretching of an image is the same as histogram equalization but we cap some percentage of pixel values to black (0) and white (255).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"def get_black_white_indices(hist, tot_count, black_count, white_count):\\n    '''Blacking and Whiting out indices same as color balance'''\\n\\n    black_ind = 0\\n    white_ind = 255\\n    co = 0\\n    for i in range(len(hist)):\\n        co += hist[i]\\n        if co > black_count:\\n            black_ind = i\\n            break\\n            \\n    co = 0\\n    for i in range(len(hist) - 1, -1, -1):\\n        co += hist[i]\\n        if co > (tot_count - white_count):\\n            white_ind = i\\n            break\\n    \\n    return [black_ind, white_ind]\\n\\ndef contrast_stretch(img, black_point, white_point):\\n    '''Contrast stretch image with black and white cap'''\\n    \\n    tot_count = img.shape[0] * img.shape[1]\\n    black_count = tot_count * black_point / 100\\n    white_count= tot_count * white_point / 100\\n    ch_hists = []\\n    # calculate histogram for each channel\\n    for ch in cv2.split(img):\\n        ch_hists.append(cv2.calcHist([ch], [0], None, [256], (0, 256)).flatten().tolist())\\n    \\n    # get black and white percentage indices\\n    black_white_indices = []\\n    for hist in ch_hists:\\n        black_white_indices.append(get_black_white_indices(hist, tot_count, black_count, white_count))\\n        \\n    stretch_map = np.zeros((3, 256), dtype = 'uint8')\\n    \\n    # stretch histogram \\n    for curr_ch in range(len(black_white_indices)):\\n        black_ind, white_ind = black_white_indices[curr_ch]\\n        for i in range(stretch_map.shape[1]):\\n            if i < black_ind:\\n                stretch_map[curr_ch][i] = 0\\n            else:\\n                if i > white_ind:\\n                    stretch_map[curr_ch][i] = 255\\n                else:\\n                    if (white_ind - black_ind) > 0:\\n                        stretch_map[curr_ch][i] = round((i - black_ind) / (white_ind - black_ind)) * 255\\n                    else:\\n                        stretch_map[curr_ch][i] = 0\\n    \\n    # stretch image\\n    ch_stretch = []\\n    for i, ch in enumerate(cv2.split(img)):\\n        ch_stretch.append(cv2.LUT(ch, stretch_map[i]))\\n        \\n    return cv2.merge(ch_stretch)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For each image channel, calculate cummulative histogram sum, and then cap pixels based on \", _jsx(_components.strong, {\n        children: \"black_point = 2\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"white_point = 99.5\"\n      }), \" percentage.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"contrast_stretch_img = contrast_stretch(negative_img, 2, 99.5)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Negative image after contrast stretching is\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/contrast-stretch.jpg\",\n        alt: \"Contrast stretch image:=:70:=:Contrast strech image\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Gaussin Blur & Gamma Correction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Contrast stretching image contains noise, so blur the image with Gaussian kernel. As Gaussian distribution kernel can be linearly separable, we apply convolution with the same 1D-kernel along the x-axis and y-axis for performance (negligible for small kernels and low-res images).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"def fast_gaussian_blur(img, ksize, sigma):\\n    '''Gussian blur using linear separable property of Gaussian distribution'''\\n    \\n    kernel_1d = cv2.getGaussianKernel(ksize, sigma)\\n    return cv2.sepFilter2D(img, -1, kernel_1d, kernel_1d)\\n\\ndef gamma(img, gamma_value):\\n    '''Gamma correction of image'''\\n    \\n    i_gamma = 1 / gamma_value\\n    lut = np.array([((i / 255) ** i_gamma) * 255 for i in np.arange(0, 256)], dtype = 'uint8')\\n    return cv2.LUT(img, lut)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Apply Gaussian blur with \", _jsx(_components.strong, {\n        children: \"kernel_size = 3\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"sigma = 1\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"blur_img = fast_gaussian_blur(contrast_stretch_img, 3, 1)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blurred image after noise suppression is\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/gaussian-blur.jpg\",\n        alt: \"Gaussian blur image:=:70:=:Blurred image\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now apply Gamma correction to enhance the blurred image with \", _jsx(_components.strong, {\n        children: \"gamma_value = 1.1\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"gamma_img = gamma(blur_img, 1.1)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blurred image Gamma corrected looks like\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/gamma-correction.jpg\",\n        alt: \"Gamma correction:=:70:=:Gamma corrected image\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Color Balance\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Color balance of an image is same as contrast-stretching method above but they are different in implementation. Above contrast-stretching is an implementation based on \", _jsx(_components.a, {\n        href: \"https://imagemagick.org/api/MagickCore/enhance_8c.html\",\n        children: \"ImageMagick-ContrastStretchImage()\"\n      }), \", and \", _jsx(_components.a, {\n        href: \"https://gist.github.com/DavidYKay/9dad6c4ab0d8d7dbf3dc\",\n        children: \"color balance\"\n      }), \" is based on \", _jsx(_components.a, {\n        href: \"https://www.ipol.im/pub/art/2011/llmps-scb/article.pdf\",\n        children: \"Simplest Color Balance\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"def color_balance(img, low_per, high_per):\\n    '''Contrast stretch image by histogram equilization with black and white cap'''\\n    \\n    tot_pix = img.shape[1] * img.shape[0]\\n    # no.of pixels to black-out and white-out\\n    low_count = tot_pix * low_per / 100\\n    high_count = tot_pix * (100 - high_per) / 100\\n    \\n    cs_img = []\\n    # for each channel, apply contrast-stretch\\n    for ch in cv2.split(img):\\n        # cummulative histogram sum of channel\\n        cum_hist_sum = np.cumsum(cv2.calcHist([ch], [0], None, [256], (0, 256)))\\n\\n        # find indices for blacking and whiting out pixels\\n        li, hi = np.searchsorted(cum_hist_sum, (low_count, high_count))\\n        if (li == hi):\\n            cs_img.append(ch)\\n            continue\\n        # lut with min-max normalization for [0-255] bins\\n        lut = np.array([0 if i < li \\n                        else (255 if i > hi else round((i - li) / (hi - li) * 255)) \\n                        for i in np.arange(0, 256)], dtype = 'uint8')\\n        # constrast-stretch channel\\n        cs_ch = cv2.LUT(ch, lut)\\n        cs_img.append(cs_ch)\\n        \\n    return cv2.merge(cs_img)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Enhance image by passing Gamma corrected image to \", _jsx(_components.strong, {\n        children: \"color_balance()\"\n      }), \" with parameters \", _jsx(_components.strong, {\n        children: \"low_per = 2\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"high_per = 1\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"color_balanced_img = color_balance(gamma_img, 2, 1)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The final enhanced whiteboard image is\\n\", _jsx(_components.img, {\n        src: \"whiteboard-enhance/whiteboard-image-enhanced.jpg\",\n        alt: \"Whiteboard image enhance:=:70:=:Whiteboard image enhanced\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find out full code at my Github repository file \", _jsx(_components.a, {\n        href: \"https://github.com/santhalakshminarayana/whiteboard-image-enhance/blob/main/whiteboard_image_enhance.py\",\n        children: \"whiteboard_image_enhance.py\"\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Results\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/img_2.jpg\",\n        alt: \"img_2:=:100\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/img_3.jpg\",\n        alt: \"img_3:=:100\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"whiteboard-enhance/img_4.jpg\",\n        alt: \"img_4:=:100\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"whiteboard-image-enhancement-opencv-python"},"__N_SSG":true}
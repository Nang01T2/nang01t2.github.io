{"pageProps":{"postMetadata":{"title":"Markdown Guide","date":"2019-10-11","tags":["github","guide"],"draft":false,"summary":"Markdown cheatsheet for all your blogging needs - headers, lists, images, tables and more! An illustrated guide based on GitHub Flavored Markdown."},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h4: \"h4\",\n    em: \"em\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    img: \"img\",\n    blockquote: \"blockquote\",\n    div: \"div\",\n    span: \"span\",\n    sup: \"sup\",\n    input: \"input\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    section: \"section\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Markdown and Mdx parsing is supported via \", _jsx(_components.code, {\n        children: \"unified\"\n      }), \", and other remark and rehype packages. \", _jsx(_components.code, {\n        children: \"next-mdx-remote\"\n      }), \" allows us to parse \", _jsx(_components.code, {\n        children: \".mdx\"\n      }), \" and \", _jsx(_components.code, {\n        children: \".md\"\n      }), \" files in a more flexible manner without touching webpack.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"GitHub flavored markdown is used. \", _jsx(_components.code, {\n        children: \"mdx-prism\"\n      }), \" provides syntax highlighting capabilities for code blocks. Here's a demo of how everything looks.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following markdown cheatsheet is adapted from: \", _jsx(_components.a, {\n        href: \"https://guides.github.com/features/mastering-markdown/\",\n        children: \"https://guides.github.com/features/mastering-markdown/\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"What is Markdown?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Markdown is a way to style text on the web. You control the display of the document; formatting words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in, like \", _jsx(_components.code, {\n        children: \"#\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"*\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Syntax guide\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here’s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Headers\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"# This is a h1 tag\\n\\n## This is a h2 tag\\n\\n#### This is a h4 tag\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"This is a h1 tag\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"This is a h2 tag\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"This is a h4 tag\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Emphasis\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"_This text will be italic_\\n\\n**This text will be bold**\\n\\n_You **can** combine them_\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"This text will be italic\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"This text will be bold\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"You \", _jsx(_components.strong, {\n          children: \"can\"\n        }), \" combine them\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Lists\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unordered\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"- Item 1\\n- Item 2\\n  - Item 2a\\n  - Item 2b\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Item 1\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Item 2\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Item 2a\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Item 2b\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Ordered\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"1. Item 1\\n1. Item 2\\n1. Item 3\\n   1. Item 3a\\n   1. Item 3b\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Item 1\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Item 2\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Item 3\", \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Item 3a\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Item 3b\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Images\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png)\\nFormat: ![Alt Text](url)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\",\n        alt: \"GitHub Logo\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Links\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"http://github.com - automatic!\\n[GitHub](http://github.com)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"http://github.com\",\n        children: \"http://github.com\"\n      }), \" - automatic!\\n\", _jsx(_components.a, {\n        href: \"http://github.com\",\n        children: \"GitHub\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Blockquotes\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"As Kanye West said:\\n\\n> We're living the future so\\n> the present is our past.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As Kanye West said:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"We're living the future so\\nthe present is our past.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Inline code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"I think you should use an\\n`<addr>` element here instead.\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I think you should use an\\n\", _jsx(_components.code, {\n        children: \"<addr>\"\n      }), \" element here instead.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Syntax highlighting\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here’s an example of how you can use syntax highlighting with \", _jsx(_components.a, {\n        href: \"https://help.github.com/articles/basic-writing-and-formatting-syntax/\",\n        children: \"GitHub Flavored Markdown\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"```js:fancyAlert.js\\nfunction fancyAlert(arg) {\\n  if (arg) {\\n    $.facebox({ div: '#foo' })\\n  }\\n}\\n```\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And here's how it looks - nicely colored with styled code titles!\"\n    }), \"\\n\", _jsx(_components.div, {\n      \"data-rehype-pretty-code-fragment\": \"\",\n      children: _jsx(_components.pre, {\n        \"data-language\": \"js:fancyAlert.js\",\n        \"data-theme\": \"default\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"js:fancyAlert.js\",\n          \"data-theme\": \"default\",\n          children: [_jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#abb2bf\"\n              },\n              children: \"function fancyAlert(arg) {\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#abb2bf\"\n              },\n              children: \"  if (arg) {\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#abb2bf\"\n              },\n              children: \"    $.facebox({ div: '#foo' })\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#abb2bf\"\n              },\n              children: \"  }\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#abb2bf\"\n              },\n              children: \"}\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Footnotes\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Here is a simple footnote[^1]. With some additional text after it.\\n\\n[^1]: My reference.\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is a simple footnote\", _jsx(_components.sup, {\n        children: _jsx(_components.a, {\n          href: \"#user-content-fn-1\",\n          id: \"user-content-fnref-1\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"1\"\n        })\n      }), \". With some additional text after it.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Task Lists\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"- [x] list syntax required (any unordered or ordered list supported)\\n- [x] this is a complete item\\n- [ ] this is an incomplete item\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          checked: true,\n          disabled: true\n        }), \" \", \"list syntax required (any unordered or ordered list supported)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          checked: true,\n          disabled: true\n        }), \" \", \"this is a complete item\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"this is an incomplete item\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tables\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can create tables by assembling a list of words and dividing them with hyphens \", _jsx(_components.code, {\n        children: \"-\"\n      }), \" (for the first row), and then separating each column with a pipe \", _jsx(_components.code, {\n        children: \"|\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"| First Header                | Second Header                |\\n| --------------------------- | ---------------------------- |\\n| Content from cell 1         | Content from cell 2          |\\n| Content in the first column | Content in the second column |\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"First Header\"\n          }), _jsx(_components.th, {\n            children: \"Second Header\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Content from cell 1\"\n          }), _jsx(_components.td, {\n            children: \"Content from cell 2\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Content in the first column\"\n          }), _jsx(_components.td, {\n            children: \"Content in the second column\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Strikethrough\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Any word wrapped with two tildes (like \", _jsx(_components.code, {\n        children: \"~~this~~\"\n      }), \") will appear \", _jsx(_components.del, {\n        children: \"crossed out\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.section, {\n      \"data-footnotes\": true,\n      className: \"footnotes\",\n      children: [_jsx(_components.h2, {\n        className: \"sr-only\",\n        id: \"footnote-label\",\n        children: \"Footnotes\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          id: \"user-content-fn-1\",\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"My reference. \", _jsx(_components.a, {\n              href: \"#user-content-fnref-1\",\n              \"data-footnote-backref\": true,\n              className: \"data-footnote-backref\",\n              \"aria-label\": \"Back to content\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"toc":[{"value":"Introduction","url":"#introduction","depth":1},{"value":"What is Markdown?","url":"#what-is-markdown","depth":1},{"value":"Syntax guide","url":"#syntax-guide","depth":1},{"value":"Headers","url":"#headers","depth":2},{"value":"This is a h1 tag","url":"#this-is-a-h1-tag","depth":1},{"value":"This is a h2 tag","url":"#this-is-a-h2-tag","depth":2},{"value":"This is a h4 tag","url":"#this-is-a-h4-tag","depth":4},{"value":"Emphasis","url":"#emphasis","depth":2},{"value":"Lists","url":"#lists","depth":2},{"value":"Unordered","url":"#unordered","depth":3},{"value":"Ordered","url":"#ordered","depth":3},{"value":"Images","url":"#images","depth":2},{"value":"Links","url":"#links","depth":2},{"value":"Blockquotes","url":"#blockquotes","depth":2},{"value":"Inline code","url":"#inline-code","depth":2},{"value":"Syntax highlighting","url":"#syntax-highlighting","depth":2},{"value":"Footnotes","url":"#footnotes","depth":2},{"value":"Task Lists","url":"#task-lists","depth":2},{"value":"Tables","url":"#tables","depth":2},{"value":"Strikethrough","url":"#strikethrough","depth":2}],"id":["programming","github-markdown-guide"]},"__N_SSG":true}
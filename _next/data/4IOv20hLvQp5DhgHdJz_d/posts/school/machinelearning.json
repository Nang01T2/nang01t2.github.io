{"pageProps":{"postMetadata":{"title":"Machine Learning Notes","date":"2021-08-15","tags":["school","machinelearning"]},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    hr: \"hr\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Extracting knowledge from a set of data, also known as predictive analytics. Machine learning at its core solves the problem of having handcoded rules for the decision making in software because as the input variation increases the quantity of rules needed isn't humanly possible to implement therefore raising the need for a system to implement new rules automatically.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Machine Learning\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spam detection is an early example of machine learning since black listing words or phrases is practical up to a point, after which we need an algorithm that can update itself with new rules automatically. Facial recognition is another example, it is a task that we have a hard time recreating since computers process images in a fundamentally different way. Disadvantages of manually crafted rules include:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Rules tend to be so specific that changing the input slightly requires the modification of the entire system.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules are only useful when designed by humans with an incredibly deep understanding of all possible variations.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Supervised learning is a useful machine learning algorithm that generalizes a pattern from a set of known examples, it needs prior knowledge of the inputs and the desired outputs and its capabilities will be as good as its dataset. Examples include handwritten identification, tumor image identification and fraudulent transactions detection.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Unsupervised learning algorithms are harder to understand and evaluate but work even when we don't have a set of expected outputs. Examples include identifying the main theme in a text, segmenting customers into preference groups or detecting abnormal behavior in a system. Datasets are generally formatted in tables for ease of manipulation and filtering, also we can assign each row to a data point or entity and each column to a property or feature.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Feature extraction is the science of extracting the relevant features of a system and its done by carefully filtering the dataset, this is a fundamental step since machine learning requires a clear understanding of how the dataset relates to the task being solved. When starting with a machine learning system answer:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"What is the question that the system will answer?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Is the data collected useful for answering the question?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"What is the best representation of the question for a machine?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Do I have enough and good data?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"What features of the data did I extracted?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Will the features enable the right predictions?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"How will I measure the application success?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"How does the system interact with other existing systems?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For this class we will use Python, scikit learn, NumPy (arrays, generators), SciPy (linear algebra, optimization, statistics), Matplotlib (charts) and Pandas (data wrangling, tables).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"First Application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Suppose a botanist wants image recognition for a set of similar looking flowers, he has length and width of the petals and the sepals in centimeters, he has a dataset with the correct classification of three types of flower. This is a classification problem therefore the system must assign any input to its correct class, in this case there are three classes. For each data point in the dataset there will be a label representing the class it belongs to.\"\n    }), \"\\n\", _jsx(_components.div, {\n      \"data-rehype-pretty-code-fragment\": \"\",\n      children: _jsx(_components.pre, {\n        \"data-language\": \"python\",\n        \"data-theme\": \"default\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"default\",\n          children: [_jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C678DD\",\n                fontStyle: \"italic\"\n              },\n              children: \"from\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" skylearn.datasets \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C678DD\",\n                fontStyle: \"italic\"\n              },\n              children: \"import\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" load_iris\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Bunch datatype, similar to a dict\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"iris_dataset \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"load_iris\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Keys in Dataset: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"\\\\n\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset.\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"keys\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"()))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# DESCR is a short dataset description\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'DESCR'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"][:\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"190\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"])\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Target names is a str array with the classes\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Target names: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"\\\\n\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'target_names'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"]))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Feature names is a str array with the relevant features\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Feature names: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"\\\\n\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'feature_names'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"]))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# The data itself is in a numpy array with the 4 measurements\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Type of data: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"type\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'data'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"])))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# The Rows are the dataset flowers and the Columns are their measurements\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Shape of data: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'data'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"].shape))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Therefore we have 150 samples and 4 features in the dataset.\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"First five rows: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"\\\\n\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'data'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"][:\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"5\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"]))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Target is a numpy array with the correct label for each sample\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Shape of target: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'target'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"].shape))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Note that Target is encoded using the index of target names\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"Target: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"\\\\n\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'target'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"]))\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note that we don't have a way of known if the system has generalized a pattern or simply memorized the input, therefore we will split the dataset into two groups, one  to train the model (training set) and the other half to test (testing set) if it has memorized or generalized the data. The function train_test_split is used for dividing the sets with a deterministic pseudorandom number generator to ensure that the testing dataset contains every class.\"\n    }), \"\\n\", _jsx(_components.div, {\n      \"data-rehype-pretty-code-fragment\": \"\",\n      children: _jsx(_components.pre, {\n        \"data-language\": \"python\",\n        \"data-theme\": \"default\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"default\",\n          children: [_jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C678DD\",\n                fontStyle: \"italic\"\n              },\n              children: \"from\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" skylearn.datasets \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C678DD\",\n                fontStyle: \"italic\"\n              },\n              children: \"import\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" load_iris\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"iris_dataset \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"load_iris\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Set the training and testing datasets\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# By default it extracts 75 percent as training and 25 percent as testing\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C678DD\",\n                fontStyle: \"italic\"\n              },\n              children: \"from\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" sklearn.model_selection \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C678DD\",\n                fontStyle: \"italic\"\n              },\n              children: \"import\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" train_test_split\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"X_train, X_test, y_train, y_test \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"train_test_split\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'data'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"], iris_dataset[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'target'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"], \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"random_state\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"X_train shape: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(X_train.shape))\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"y_train shape: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(y_train.shape))\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"X_test shape: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(X_test.shape))\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"print\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"y_test shape: \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"{}\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"format\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(y_test.shape))\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Create a datafraim with the X_train and its features\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"iris_dataframe \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" pandas.\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"DataFrame\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(X_train, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"columns\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" iris_dataset.feature_names)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#7F848E\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Create a scatter matrix from the dataframe and color by y_train\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"grr \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" pandas.\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"scatter_matrix\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"(iris_dataframe, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"c\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" y_train, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"figsize\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" (\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"15\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"15\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"), \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"marker\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'o'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"hist_kwds\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"{\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"'bins'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \": \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"20\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \"}, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"s\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"60\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"alpha\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"0.8\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\",\n                fontStyle: \"italic\"\n              },\n              children: \"cmap\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#ABB2BF\"\n              },\n              children: \" mglearn.cm3)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We inspect the data to determine if the problem can be solved by Machine Learning, if the desired result is contained in the dataset or if there are peculiarities or abnormalities. Inconsistences and unexpected measurements are common for machine learning models. Plotting can be used as a tool to inspect pairs or features, with pair pairing in the case of a relatively small number of features.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"TODO:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Continue from the book notes.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"toc":[],"id":["school","machinelearning"]},"__N_SSG":true}
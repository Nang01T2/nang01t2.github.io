{"pageProps":{"postMetadata":{"title":"WHat is GFM","id":"gfm"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"GFM\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Autolink literals\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.example.com, https://example.com, and contact@example.com.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Footnote\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A note[^1]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"[^1]: Big note.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Strikethrough\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"~one~ or ~~two~~ tildes.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Table\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| a | b  |  c |  d  |\\n| - | :- | -: | :-: |\\n| 1 | Apple   | Apple   | Apple   |\\n| 2 | Orange  | Orange   | Orange   |\\n| 3 | Grape   | Grape   | Grape   |\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| No  | Fruites |\\n| --- | ------- |\\n| 1   | Apple   |\\n| 2   | Orange  |\\n| 3   | Grape   |\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tasklist\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"[ ] to do\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"[x] done\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"gfm"},"__N_SSG":true}
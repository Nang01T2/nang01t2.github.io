{"pageProps":{"postMetadata":{"title":"Create a Notes App with Flutter","description":"Create a color-rich Note-taking app with Flutter.","imgName":"note-app-flutter/note-app-in-flutter.jpg","date":"Jun 15, 2021","tags":["flutter"],"keywords":["flutter","dart","android","note-app","note-taking","sqflite","sqlite"],"id":"create-a-notes-app-with-flutter"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    blockquote: \"blockquote\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    em: \"em\",\n    hr: \"hr\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"note-app-flutter/note-app-in-flutter.jpg\",\n        alt: \"Create a Notes App with flutter\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Create a Note-taking App in Flutter\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Flutter is a declarative framework that requires programming in Dart. Flutter is suitable for creating simple apps like Note-taking, Event-registration, etc.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Pre-requisites: Knowledge of basic Dart and Flutter. Read about \", _jsx(_components.a, {\n          href: \"https://flutter.dev/docs\",\n          children: \"Flutter\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://dart.dev/guides\",\n          children: \"Dart\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With basic concepts like Widgets and Material design we can create simple apps very fast and easily in Flutter as in Flutter we can use tons of pre-designed widgets to create almost every popular design using in the modern design world.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this tutorial, we discuss creating a simple note-taking app. The note-taking app we are going to create provides options like create, save, update and delete notes.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our note-taking app contains two screens\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Home screen to display all saved notes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Notes edit screen to create new notes or edit saved notes\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Create Flutter App\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before creating a Flutter app please make sure you have installed flutter-sdk and dart-sdk. If not follow the instructions to \", _jsx(_components.a, {\n        href: \"https://flutter.dev/docs/get-started/install\",\n        children: \"install flutter\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Create a raw flutter app from the terminal. Run the following command and pass any name (to join more than single sting use only underscore)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"flutter create notes_app\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Go to root directory of \", _jsx(_components.strong, {\n        children: \"notes_app\"\n      }), \" and locate \", _jsx(_components.strong, {\n        children: \"main.dart\"\n      }), \" in \", _jsx(_components.strong, {\n        children: \"lib\"\n      }), \" folder. This is where our app starts execution by calling the main() function. You can find some code here which displays the welcome screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now to see the app in an emulator or on a physical device run the below command.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"cd notes_app/\\nflutter run\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For the initial run, it takes some time to install the app on the device, and later builds will be fast. If you encounter any error run \", _jsx(_components.em, {\n        children: \"flutter doctor -v\"\n      }), \" for additional information and make sure all necessary items are checked.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"What a Note should like and contain?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A simple note must have a title and the content which can be edited as many times as possible. We can also add color to note for look and feel.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To store notes we use \", _jsx(_components.a, {\n        href: \"https://pub.dev/packages/sqflite\",\n        children: \"Sqflite\"\n      }), \" (a plugin to mimic SQL database in Flutter). Each note can be stored as a single row in the database with fields id, title, content, color.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a file \", _jsx(_components.strong, {\n        children: \"note.dart\"\n      }), \" inside \", _jsx(_components.strong, {\n        children: \"lib/models\"\n      }), \". Add a class \", _jsx(_components.strong, {\n        children: \"Note\"\n      }), \" to store note as an object which can be converted later as a Map object to store in the database.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:models/note.dart\",\n        children: \"class Note {\\n\\tint id;\\n\\tString title;\\n\\tString content;\\n\\tString noteColor;\\n\\n\\tNote({\\n\\t\\tthis.id = null, \\n\\t\\tthis.title = \\\"Note\\\", \\n\\t\\tthis.content = \\\"Text\\\", \\n\\t\\tthis.noteColor = 'red'\\n\\t});\\n\\n\\tMap<String, dynamic> toMap() {\\n\\t\\tMap<String, dynamic> data = Map<String, dynamic>();\\n\\t\\tif (id != null) {\\n\\t\\t\\tdata['id'] = id;\\n\\t\\t}\\n\\t\\tdata['title'] = title;\\n\\t\\tdata['content'] = content;\\n\\t\\tdata['noteColor'] = noteColor;\\n\\t\\treturn data;\\n\\t}\\n\\n\\t@override toString() {\\n\\t\\treturn {\\n\\t\\t\\t'id': id,\\n\\t\\t\\t'title': title,\\n\\t\\t\\t'content': content,\\n\\t\\t\\t'noteColor': noteColor,\\n\\t\\t}.toString();\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This Note class has attributes\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"id (primary key) - an identifier to store unique note objects in the database\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"title - the title of the note\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"content - content of the note\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"noteColor - the color of the note\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"toMap()\"\n      }), \" returns note as an object to store in the database.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For note colors, add another file called \", _jsx(_components.strong, {\n        children: \"theme/note_colors.dart\"\n      }), \" inside \", _jsx(_components.strong, {\n        children: \"lib/theme\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:theme/note_colors.dart\",\n        children: \"const NoteColors = {\\n\\t'red': {'l': 0xFFFFCDD2,'b': 0xFFE57373},\\n\\t'pink': {'l': 0xFFF8BBD0, 'b': 0xFFF06292},\\n\\t'purple': {'l': 0xFFE1BEE7, 'b': 0xFFBA68C8},\\n\\t'deepPurple': {'l': 0xFFD1C4E9, 'b': 0xFF9575CD},\\n\\t'indigo': {'l': 0xFFC5CAE9, 'b': 0xFF7986CB},\\n\\t'blue': {'l': 0xFFBBDEFB, 'b': 0xFF64B5F6},\\n\\t'lightBlue': {'l': 0xFFB3E5FC, 'b': 0xFF4FC3F7},\\n\\t'cyan': {'l': 0xFFB2EBF2, 'b': 0xFF4DD0E1},\\n\\t'teal': {'l': 0xFFB2DFDB, 'b': 0xFF4DB6AC},\\n\\t'green': {'l': 0xFFC8E6C9, 'b': 0xFF81C784},\\n\\t'lightGreen': {'l': 0xFFDCEDC8, 'b': 0xFFAED581},\\n\\t'lime': {'l': 0xFFF0F4C3, 'b': 0xFFDCE775},\\n\\t'yellow': {'l': 0xFFFFF9C4, 'b': 0xFFFFF176},\\n\\t'amber': {'l': 0xFFFFECB3, 'b': 0xFFFFD54F},\\n\\t'orange': {'l': 0xFFFFE0B2, 'b': 0xFFFFB74D},\\n\\t'deepOrange': {'l': 0xFFFFCCBC, 'b': 0xFFFF8A65},\\n\\t'brown': {'l': 0xFFD7CCCB, 'b': 0xFFA1887F},\\n\\t'blueGray': {'l': 0xFFCFD8DC, 'b': 0xFF90A4AE},\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each color name ('k') is a key and each key ('k') has two colors 'l' and 'b', where 'l' is a light color and 'b' is the bright color of this 'k' color. The light and bright colors are used to display a note in the UI which we discuss later. 'k' is the color name we store in the database.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Store notes in the database\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now to store notes on the database we use \", _jsx(_components.strong, {\n        children: \"sqflite\"\n      }), \" plugin. Install \", _jsx(_components.strong, {\n        children: \"sqflite\"\n      }), \" by adding dependency in \", _jsx(_components.em, {\n        children: \"pubspec.yaml\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"dependencies:\\n  flutter:\\n    sdk: flutter\\n  sqflite: ^1.3.0\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now in terminal run \", _jsx(_components.em, {\n        children: \"flutter pub get\"\n      }), \" to install or update dependencies in \", _jsx(_components.em, {\n        children: \"pubspec.yaml\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To handle database operations we write different functions for different operations like read, write, update and delete. Create \", _jsx(_components.strong, {\n        children: \"notes_database.dart\"\n      }), \" inside \", _jsx(_components.strong, {\n        children: \"models\"\n      }), \" and add a class to handle different operations\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:models/notes_database.dart\",\n        children: \"import 'package:sqflite/sqflite.dart';\\n\\nimport 'note.dart';\\n\\nclass NotesDatabase {\\n\\tstatic final _name = \\\"NotesDatabase.db\\\";\\n\\tstatic final _version = 1;\\n\\n\\tDatabase database;\\n\\tstatic final tableName = 'notes';\\n\\n\\tinitDatabase() async {\\n\\t\\tdatabase = await openDatabase(\\n\\t\\t\\t_name,\\n\\t\\t\\tversion: _version,\\n\\t\\t\\tonCreate: (Database db, int version) async {\\n\\t\\t\\t\\tawait db.execute(\\n\\t\\t\\t\\t\\t'''CREATE TABLE $tableName (\\n\\t\\t\\t\\t\\tid INTEGER PRIMARY KEY AUTOINCREMENT,\\n\\t\\t\\t\\t\\ttitle TEXT,\\n\\t\\t\\t\\t\\tcontent TEXT,\\n\\t\\t\\t\\t\\tnoteColor TEXT\\n\\t\\t\\t\\t\\t)'''\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t);\\n\\t}\\n\\n\\tFuture<int> insertNote(Note note) async {\\n\\t\\treturn await database.insert(tableName, \\n\\t\\t\\tnote.toMap(), \\n\\t\\t\\tconflictAlgorithm: ConflictAlgorithm.replace\\n\\t\\t);\\n\\t}\\n\\n\\tFuture<int> updateNote(Note note) async {\\n\\t\\treturn await database.update(tableName, note.toMap(),\\n\\t\\t\\twhere: 'id = ?', \\n\\t\\t\\twhereArgs: [note.id],\\n\\t\\t\\tconflictAlgorithm: ConflictAlgorithm.replace\\n\\t\\t);\\n\\t}\\n\\n\\tFuture<List<Map<String, dynamic>>> getAllNotes() async {\\n\\t\\treturn await database.query(tableName);\\n\\t}\\n\\n\\tFuture<Map<String, dynamic>> getNotes(int id) async {\\n\\t\\tvar result = await database.query(tableName,\\n\\t\\t\\twhere: 'id = ?',\\n\\t\\t\\twhereArgs: [id]\\n\\t\\t);\\n\\n\\t\\tif (result.length > 0) {\\n\\t\\t\\treturn result.first;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tFuture<int> deleteNote(int id) async {\\n\\t\\treturn await database.delete(tableName,\\n\\t\\t\\twhere: 'id = ?',\\n\\t\\t\\twhereArgs: [id]\\n\\t\\t);\\n\\t}\\n\\n\\tcloseDatabase() async {\\n\\t\\tawait database.close();\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, we need to create a table in the database with some schema. Inside \", _jsx(_components.strong, {\n        children: \"initDatabase()\"\n      }), \", we are calling \", _jsx(_components.strong, {\n        children: \"openDatabase()\"\n      }), \" to create database and table or open existing database and table by passing parameters \", _jsx(_components.strong, {\n        children: \"_name\"\n      }), \" (name of the database) and \", _jsx(_components.strong, {\n        children: \"_version\"\n      }), \" where \", _jsx(_components.strong, {\n        children: \"_name = NotesDatabse.db\"\n      }), \" is the name of the database and we can maintain different versions of the database through \", _jsx(_components.strong, {\n        children: \"_version\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there is no database with a specified \", _jsx(_components.strong, {\n        children: \"name\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"onCreate\"\n      }), \" callback is called to create a database with table and schema. Above we create a table with \", _jsx(_components.strong, {\n        children: \"tableName = notes\"\n      }), \" and initial schema with required fields like id, title, content, and noteColor to store a note object.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"openDatabase()\"\n      }), \" is an async operation and returns \", _jsx(_components.strong, {\n        children: \"Database\"\n      }), \" object reference which points to the created/existed database. We store this reference as \", _jsx(_components.strong, {\n        children: \"database\"\n      }), \" of type class \", _jsx(_components.strong, {\n        children: \"Database\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Other functions \", _jsx(_components.strong, {\n        children: \"insertNote\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"updateNote\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"getNotes\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"deleteNotes\"\n      }), \" handles different database operations. Read more about \", _jsx(_components.a, {\n        href: \"https://github.com/tekartik/sqflite/blob/master/sqflite/doc/how_to.md\",\n        children: \"how to perform different operations in sqflite\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As we cannot store Note as a class object we convert Note object members to a Map object by calling Note.toMap() which returns a Map object which sqflite map fields and values to store in the database. And Sqflite returns data as Map objects the way we pass it to insert rows in the database.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We have added logic to maintain notes in the database. But we have not done anything in UI to interact for maintaining notes.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Add Home Screen\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now create a file called \", _jsx(_components.strong, {\n        children: \"home.dart\"\n      }), \" in \", _jsx(_components.strong, {\n        children: \"lib/screens\"\n      }), \". This \", _jsx(_components.strong, {\n        children: \"home.dart\"\n      }), \" serves as the Home screen of our app. Add following code to \", _jsx(_components.strong, {\n        children: \"home.dart\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:screens/home.dart\",\n        children: \"import 'package:flutter/material.dart';\\n\\nconst c1 = 0xFFFDFFFC, c2 = 0xFFFF595E, c3 = 0xFF374B4A, c4 = 0xFF00B1CC, c5 = 0xFFFFD65C, c6 = 0xFFB9CACA,\\n\\tc7 = 0x80374B4A, c8 = 0x3300B1CC, c9 = 0xCCFF595E;\\n\\n// Home Screen\\nclass Home extends StatefulWidget{\\n\\t@override\\n\\t_Home createState() => _Home();\\n}\\n\\nclass _Home extends State<Home> {\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn MaterialApp(\\n\\t\\t\\ttitle: 'Super Note',\\n\\t\\t\\thome: Scaffold(\\n\\t\\t\\t\\tbackgroundColor: Color(c6),\\n\\t\\t\\t\\tappBar: AppBar(\\n\\t\\t\\t\\t\\tautomaticallyImplyLeading: false,\\n\\t\\t\\t\\t\\tbackgroundColor: const Color(c2),\\n\\t\\t\\t\\t\\tbrightness: Brightness.dark,\\n\\n\\t\\t\\t\\t\\ttitle: Text(\\n\\t\\t\\t\\t\\t\\t'Super Note',\\n\\t\\t\\t\\t\\t\\tstyle: TextStyle(\\n\\t\\t\\t\\t\\t\\t\\tcolor: const Color(c5),\\n\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t),\\n\\n\\t\\t\\t\\t//Floating Button\\n\\t\\t\\t\\tfloatingActionButton: FloatingActionButton(\\n\\t\\t\\t\\t\\tchild: const Icon(\\n\\t\\t\\t\\t\\t\\tIcons.add,\\n\\t\\t\\t\\t\\t\\tcolor: const Color(c5),\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\ttooltip: 'New Notes',\\n\\t\\t\\t\\t\\tbackgroundColor: const Color(c4),\\n\\t\\t\\t\\t\\tonPressed: () => {},\\n\\t\\t\\t\\t),\\n\\t\\t\\t),\\n\\t\\t);\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are some color constants defined at the top which will be used across the app. The color format in Flutter is different from normal Hex. In normal Hex format, we provide opacity at last but in Flutter we have to provide opacity at first.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here we are creating a Home widget as \", _jsx(_components.strong, {\n        children: \"StatefulWidget\"\n      }), \" keeping in mind that we need to maintain the state. Every custom widget must override \", _jsx(_components.strong, {\n        children: \"build\"\n      }), \" method and return a widget. \", _jsx(_components.strong, {\n        children: \"MaterialApp\"\n      }), \" widget gives child widgets material look and we must declare required attributes. \", _jsx(_components.strong, {\n        children: \"Scaffold\"\n      }), \" widget is a common material design concept that provides appbar, floating button, drawer, body, etc.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Home screen displays all notes stored in the database. We discuss later displaying notes in the Home screen after creating notes in the Edit screen.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To display our Home screen as default screen in our app call \", _jsx(_components.strong, {\n        children: \"Home()\"\n      }), \" widget inside \", _jsx(_components.strong, {\n        children: \"MyApp\"\n      }), \" in \", _jsx(_components.strong, {\n        children: \"main.dart\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:main.dart\",\n        children: \"import 'package:flutter/material.dart';\\n\\nimport './screens/home.dart';\\n\\nvoid main() => runApp(MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      home: Home(),\\n    );\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To see the changes in the app, in the flutter running environment press \", _jsx(_components.strong, {\n        children: \"r\"\n      }), \" to hot reload or \", _jsx(_components.strong, {\n        children: \"R\"\n      }), \" restart of the app.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"note-app-flutter/notes-app-initial-home-screen.jpg\",\n        alt: \"Home Screen:=:30\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Floating action button at the bottom-right will take us to the Edit screen to create a new note. To add navigation from Home to Edit, first create a Edit Screen Widget in \", _jsx(_components.strong, {\n        children: \"notes_edit.dart\"\n      }), \" inside \", _jsx(_components.strong, {\n        children: \"lib/screens\"\n      }), \". For now, add a simple UI for the Edit screen like below because we just need a widget to route from Home to Edit screen.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:screens/notes_edit.dart\",\n        children: \"import 'package:flutter/material.dart';\\n\\nconst c1 = 0xFFFDFFFC, c2 = 0xFFFF595E, c3 = 0xFF374B4A, c4 = 0xFF00B1CC, c5 = 0xFFFFD65C, c6 = 0xFFB9CACA,\\n\\t\\t\\tc7 = 0x80374B4A;\\n\\nclass NotesEdit extends StatefulWidget {\\n\\t_NotesEdit createState() => _NotesEdit();\\n}\\n\\nclass _NotesEdit extends State<NotesEdit> {\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn MaterialApp(\\n\\t\\t\\ttitle: 'Edit Screen',\\n\\t\\t\\thome: Text(\\n\\t\\t\\t\\t'Edit'\\n\\t\\t\\t),\\n\\t\\t);\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" widget is the main widget for the Edit screen. We call this widget in navigation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Navigation from Home to Edit\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add navigation from Home to Edit when pressed floating-action-buttton. Call \", _jsx(_components.strong, {\n        children: \"Navigation.push()\"\n      }), \" for the \", _jsx(_components.strong, {\n        children: \"EditNotes\"\n      }), \" widget. In \", _jsx(_components.strong, {\n        children: \"home.dart\"\n      }), \" add navigation in \", _jsx(_components.strong, {\n        children: \"onPressed()\"\n      }), \" event of floating-action-button.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"import './notes_edit.dart';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"//Floating Button\\nfloatingActionButton: FloatingActionButton(\\n\\tchild: const Icon(\\n\\t\\tIcons.add,\\n\\t\\tcolor: const Color(c5),\\n\\t),\\n\\ttooltip: 'New Notes',\\n\\tbackgroundColor: const Color(c4),\\n\\t// Go to Edit screen\\n\\tonPressed: () {\\n\\t  Navigator.push(\\n\\t  \\tcontext,     \\n\\t    MaterialPageRoute(builder: (context) => NotesEdit()),\\n\\t  );\\n\\t}\\n),\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Change Edit Screen\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Change Edit screen UI for creating a new note.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart:screens/notes_edit.dart\",\n        children: \"import 'package:flutter/material.dart';\\n\\nimport '../models/note.dart';\\nimport '../models/notes_database.dart';\\nimport '../theme/note_colors.dart';\\n\\nconst c1 = 0xFFFDFFFC, c2 = 0xFFFF595E, c3 = 0xFF374B4A, c4 = 0xFF00B1CC, c5 = 0xFFFFD65C, c6 = 0xFFB9CACA,\\n\\tc7 = 0x80374B4A;\\n\\nclass NotesEdit extends StatefulWidget {\\n\\t_NotesEdit createState() => _NotesEdit();\\n}\\n\\nclass _NotesEdit extends State<NotesEdit> {\\n\\tString noteTitle = '';\\n\\tString noteContent = '';\\n\\tString noteColor = 'red';\\n\\n\\tTextEditingController _titleTextController = TextEditingController();\\n\\tTextEditingController _contentTextController = TextEditingController();\\n\\n\\tvoid handleTitleTextChange() {\\n\\t\\tsetState(() {\\n\\t\\t\\tnoteTitle = _titleTextController.text.trim();\\n\\t\\t});\\n\\t}\\n\\n\\tvoid handleNoteTextChange() {\\n\\t\\tsetState(() {\\n\\t\\t\\tnoteContent = _contentTextController.text.trim();\\n\\t\\t});\\n\\t}\\n\\n\\t@override\\n\\tvoid initState() {\\n\\t\\tsuper.initState();\\n\\t\\t_titleTextController.addListener(handleTitleTextChange);\\n\\t\\t_contentTextController.addListener(handleNoteTextChange);\\n\\t}\\n\\n\\t@override\\n\\tvoid dispose() {\\n\\t\\t_titleTextController.dispose();\\n\\t\\t_contentTextController.dispose();\\n\\t\\tsuper.dispose();\\n\\t}\\n\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn Scaffold(\\n\\t\\t\\tbackgroundColor: Color(NoteColors[this.noteColor]['l']),\\n\\t\\t\\tappBar: AppBar(\\n\\t\\t\\t\\tbackgroundColor: Color(NoteColors[this.noteColor]['b']),\\n\\n\\t\\t\\t\\tleading: IconButton(\\n\\t\\t\\t\\t\\ticon: const Icon(\\n\\t\\t\\t\\t\\t\\tIcons.arrow_back,\\n\\t\\t\\t\\t\\t\\tcolor: const Color(c1),\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\ttooltip: 'Back',\\n\\t\\t\\t\\t\\tonPressed: () => {},\\n\\t\\t\\t\\t),\\n\\n\\t\\t\\t\\ttitle: NoteTitleEntry(_titleTextController),\\n\\t\\t\\t),\\n\\n\\t\\t\\tbody: NoteEntry(_contentTextController),\\n\\t\\t);\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the above \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" widget, the state variables \", _jsx(_components.strong, {\n        children: \"noteTitle\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"noteContent\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"noteColor\"\n      }), \" are initialized to default values for now. \", _jsx(_components.strong, {\n        children: \"noteTitel\"\n      }), \" is to store title of the note, \", _jsx(_components.strong, {\n        children: \"noteContent\"\n      }), \" is to store note content and\", _jsx(_components.strong, {\n        children: \"noteColor\"\n      }), \" is color of the color, light and bright colors of the \", _jsx(_components.strong, {\n        children: \"noteColor\"\n      }), \" are used as \", _jsx(_components.strong, {\n        children: \"backgroundColor\"\n      }), \" for \", _jsx(_components.strong, {\n        children: \"appBar\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"Scaffold\"\n      }), \" respectively.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also there are two \", _jsx(_components.strong, {\n        children: \"TextEditingController\"\n      }), \" defined which are used to controll \", _jsx(_components.strong, {\n        children: \"TextField\"\n      }), \" values for \", _jsx(_components.strong, {\n        children: \"noteTitle\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"noteContent\"\n      }), \". These two text controller are attached with listeners in \", _jsx(_components.strong, {\n        children: \"iniitState()\"\n      }), \". These listeneres listen to changes and updates text values in state. \", _jsx(_components.strong, {\n        children: \"_titleTextController\"\n      }), \" handles and updates text value for \", _jsx(_components.strong, {\n        children: \"noteTitle\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"_contentTextController\"\n      }), \" handles \", _jsx(_components.strong, {\n        children: \"noteContent\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"title\"\n      }), \" of the \", _jsx(_components.strong, {\n        children: \"appBar\"\n      }), \" is set to a widget \", _jsx(_components.strong, {\n        children: \"NoteTitleEntry\"\n      }), \" which handles displaying and editing of the title.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"class NoteTitleEntry extends StatelessWidget {\\n\\tfinal _textFieldController;\\n\\n\\tNoteTitleEntry(this._textFieldController);\\n\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn TextField(\\n\\t\\t\\tcontroller: _textFieldController,\\n\\t\\t\\tdecoration: InputDecoration(\\n\\t\\t\\t\\tborder: InputBorder.none,\\n\\t\\t\\t\\tfocusedBorder: InputBorder.none,\\n\\t\\t\\t\\tenabledBorder: InputBorder.none,\\n\\t\\t\\t\\terrorBorder: InputBorder.none,\\n\\t\\t\\t\\tdisabledBorder: InputBorder.none,\\n\\t\\t\\t\\tcontentPadding: EdgeInsets.all(0),\\n\\t\\t\\t\\tcounter: null,\\n\\t\\t\\t\\tcounterText: \\\"\\\",\\n\\t\\t\\t\\thintText: 'Title',\\n\\t\\t\\t\\thintStyle: TextStyle(\\n\\t\\t\\t\\t\\tfontSize: 21,\\n\\t\\t\\t\\t\\tfontWeight: FontWeight.bold,\\n\\t\\t\\t\\t\\theight: 1.5,\\n\\t\\t\\t\\t),\\n\\t\\t\\t),\\n\\t\\t\\tmaxLength: 31,\\n\\t\\t\\tmaxLines: 1,\\n\\t\\t\\tstyle: TextStyle(\\n\\t\\t\\t\\tfontSize: 21,\\n\\t\\t\\t\\tfontWeight: FontWeight.bold,\\n\\t\\t\\t\\theight: 1.5,\\n\\t\\t\\t\\tcolor: Color(c1),\\n\\t\\t\\t),\\n\\t\\t\\ttextCapitalization: TextCapitalization.words,\\n\\t\\t);\\n\\t}\\t\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the \", _jsx(_components.strong, {\n        children: \"TextField\"\n      }), \", the controller is set to \", _jsx(_components.strong, {\n        children: \"_textFieldController\"\n      }), \" which is passed from parent widget ** as \", _jsx(_components.strong, {\n        children: \"_titleTextController\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly, content of the notes is handled by another widget \", _jsx(_components.strong, {\n        children: \"NoteEntry\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"class NoteEntry extends StatelessWidget {\\n\\tfinal _textFieldController;\\n\\n\\tNoteEntry(this._textFieldController);\\n\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn Container(\\n\\t\\t\\theight: MediaQuery.of(context).size.height,\\n\\t\\t\\tpadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),\\n\\t\\t\\tchild: TextField(\\n\\t\\t\\t\\tcontroller: _textFieldController,\\n\\t\\t\\t\\tmaxLines: null,\\n\\t\\t\\t\\ttextCapitalization: TextCapitalization.sentences,\\n\\t\\t\\t\\tdecoration: null,\\n\\t\\t\\t\\tstyle: TextStyle(\\n\\t\\t\\t\\t\\tfontSize: 19,\\n\\t\\t\\t\\t\\theight: 1.5,\\n\\t\\t\\t\\t),\\n\\t\\t\\t),\\n\\t\\t);\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here also controller of \", _jsx(_components.strong, {\n        children: \"TextField\"\n      }), \" is set to \", _jsx(_components.strong, {\n        children: \"_textFieldController\"\n      }), \" which is passed from parent wdiget as \", _jsx(_components.strong, {\n        children: \"_contentTextController\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After adding all these widgets, the Edit screen would look like\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"note-app-flutter/notes-app-initial-edit-screen.jpg\",\n        alt: \"Edit screen:=:30\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Add a Color palette to select Note color\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We will add a color palette to select note color and store the value in \", _jsx(_components.strong, {\n        children: \"noteColor\"\n      }), \". For color palette, add an icon in \", _jsx(_components.strong, {\n        children: \"appBar\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"actions\"\n      }), \" which on press shows a \", _jsx(_components.strong, {\n        children: \"Dialog\"\n      }), \" box with different colors.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" add color palette button\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"actions: [\\n\\tIconButton(\\n\\t\\ticon: const Icon(\\n\\t\\t\\tIcons.color_lens,\\n\\t\\t\\tcolor: const Color(c1),\\n\\t\\t),\\n\\t\\ttooltip: 'Color Palette',\\n\\t\\tonPressed: () => handleColor(context),\\n\\t),\\n],\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For this button, \", _jsx(_components.strong, {\n        children: \"onPressed\"\n      }), \" event calls \", _jsx(_components.strong, {\n        children: \"handleColor()\"\n      }), \" function which shows a color palette and store selected value in \", _jsx(_components.strong, {\n        children: \"noteColor\"\n      }), \" variable. Define \", _jsx(_components.strong, {\n        children: \"handleColor()\"\n      }), \" inside \", _jsx(_components.strong, {\n        children: \"_NotesEdit\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"void handleColor(currentContext) {\\n\\tshowDialog(\\n\\t\\tcontext: currentContext,\\n\\t\\tbuilder: (context) => ColorPalette(\\n\\t\\t\\tparentContext: currentContext,\\n\\t\\t),\\n\\t).then((colorName) {\\n\\t\\tif (colorName != null) {\\n\\t\\t\\tsetState(() {\\n\\t\\t\\t\\tnoteColor = colorName;\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This \", _jsx(_components.strong, {\n        children: \"handleColor()\"\n      }), \" calls widget \", _jsx(_components.strong, {\n        children: \"ColorPalette\"\n      }), \" which is a \", _jsx(_components.strong, {\n        children: \"Dialog\"\n      }), \" box and returns selected color value. Add \", _jsx(_components.strong, {\n        children: \"ColorPalette\"\n      }), \" widget to show different colors and return selected color\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"class ColorPalette extends StatelessWidget {\\n\\tfinal parentContext;\\n\\n\\tconst ColorPalette({ \\n\\t\\t@required this.parentContext,\\n\\t});\\n\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn Dialog(\\n\\t\\t\\tbackgroundColor: Color(c1),\\n\\t\\t\\tclipBehavior: Clip.hardEdge,\\n\\t\\t\\tinsetPadding: EdgeInsets.all(MediaQuery.of(context).size.width * 0.03),\\n\\t\\t\\tshape: RoundedRectangleBorder(\\n\\t\\t\\t\\tborderRadius: BorderRadius.circular(2),\\n\\t\\t\\t),\\n\\t\\t\\tchild: Container(\\n\\t\\t\\t\\tpadding: EdgeInsets.all(8),\\n\\t\\t\\t\\tchild: Wrap(\\n\\t\\t\\t\\t\\talignment: WrapAlignment.start,\\n\\t\\t\\t\\t\\tspacing: MediaQuery.of(context).size.width * 0.02,\\n\\t\\t\\t\\t\\trunSpacing: MediaQuery.of(context).size.width * 0.02,\\n\\t\\t\\t\\t\\tchildren: NoteColors.entries.map((entry) {\\n\\t\\t\\t\\t\\t\\treturn GestureDetector(\\n\\t\\t\\t\\t\\t\\t\\tonTap: () => Navigator.of(context).pop(entry.key),\\n\\t\\t\\t\\t\\t\\t\\tchild: Container(\\n\\t\\t\\t\\t\\t\\t\\t\\twidth: MediaQuery.of(context).size.width * 0.12,\\n\\t\\t\\t\\t\\t\\t\\t\\theight: MediaQuery.of(context).size.width * 0.12,\\n\\t\\t\\t\\t\\t\\t\\t\\tdecoration: BoxDecoration(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tborderRadius: BorderRadius.circular(MediaQuery.of(context).size.width * 0.06),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor: Color(entry.value['b']),\\n\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}).toList(),\\n\\t\\t\\t\\t),\\n\\t\\t\\t),\\n\\t\\t);\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As we already stored different colors in \", _jsx(_components.strong, {\n        children: \"NoteColors\"\n      }), \" Map object, we iterate this object and fill the color palette with bright colors.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"note-app-flutter/notes-app-color-palette.jpg\",\n        alt: \"Color Palette:=:60\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Save notes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We have everything to save notes in the database. We save a note in the database if \", _jsx(_components.strong, {\n        children: \"backButton\"\n      }), \" is pressed at the top. Now add a function to handle \", _jsx(_components.strong, {\n        children: \"backButton\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"onPressed\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"void handleBackButton() async {\\n\\tif (noteTitle.length == 0) {\\n\\t\\t// Go Back without saving\\n\\t\\tif (noteContent.length == 0) {\\n\\t\\t\\tNavigator.pop(context);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tString title = noteContent.split('\\\\n')[0];\\n\\t\\t\\tif (title.length > 31) {\\n\\t\\t\\t\\ttitle = title.substring(0, 31);\\n\\t\\t\\t}\\n\\t\\t\\tsetState(() {\\n\\t\\t\\t\\tnoteTitle = title;\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Save New note\\n\\tNote noteObj = Note(\\n\\t\\ttitle: noteTitle, \\n\\t\\tcontent: noteContent, \\n\\t\\tnoteColor: noteColor\\n\\t);\\n\\ttry {\\n\\t\\tawait _insertNote(noteObj);\\n\\t} catch (e) {\\n\\t\\tprint('Error inserting row');\\n\\t} finally {\\n\\t\\tNavigator.pop(context);\\n\\t\\treturn;\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This function calls \", _jsx(_components.strong, {\n        children: \"_insertNote()\"\n      }), \" which saves the note object in the database.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"Future<void> _insertNote(Note note) async {\\n  NotesDatabase notesDb = NotesDatabase();\\n  await notesDb.initDatabase();\\n  int result = await notesDb.insertNote(note);\\n  await notesDb.closeDatabase();\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We have saved notes in the database, now in the Home screen, display the saved notes in list view.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Show saved notes on the Home screen\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can retrieve saved notes from the database and we use that retrieved data to show a note as a list on the Home screen. As retrieving data from the database is an async task and we need to have data before building the Home widget, we use \", _jsx(_components.a, {\n        href: \"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html\",\n        children: \"FutureBuilder\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"Future<List<Map<String, dynamic>>> readDatabase() async {\\n\\ttry {\\n\\t  NotesDatabase notesDb = NotesDatabase();\\n\\t  await notesDb.initDatabase();\\n\\t  List<Map> notesList = await notesDb.getAllNotes();\\n\\t  await notesDb.closeDatabase();\\n\\t  List<Map<String, dynamic>> notesData = List<Map<String, dynamic>>.from(notesList);\\n\\t \\tnotesData.sort((a, b) => (a['title']).compareTo(b['title']));\\n\\t  return notesData;\\n\\t} catch(e) {\\n\\t\\tprint('Error retrieving notes');\\n\\t\\treturn [{}];\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This function reads all saved notes in the database and returns them as \", _jsx(_components.strong, {\n        children: \"Future\"\n      }), \" objects. We call this function in FutureBuilder and it builds the note list which displays each notes as a list.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before that add necessary imports in \", _jsx(_components.strong, {\n        children: \"home.dart\"\n      }), \" to handle the database, to store note object and colors.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"import '../models/note.dart';\\nimport '../models/notes_database.dart';\\nimport '../theme/note_colors.dart';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Store read notes from database in state and define other state variables\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"List<Map<String, dynamic>> notesData;\\nList<int> selectedNoteIds = [];\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"notesData\"\n      }), \" stores all notes data read from database and \", _jsx(_components.strong, {\n        children: \"selectedNoteIds\"\n      }), \" will have a list of selected notes when a note is selected in Home.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"body: FutureBuilder(\\n\\tfuture: readDatabase(),\\n\\tbuilder: (context, snapshot) {\\n\\t\\tif (snapshot.hasData) {\\n\\t\\t\\tnotesData = snapshot.data;\\n\\t\\t\\treturn Stack(\\n\\t\\t\\t\\tchildren: <Widget>[\\n\\t\\t\\t\\t\\t// Display Notes\\n\\t\\t\\t\\t\\tAllNoteLists(\\n\\t\\t\\t\\t\\t\\tsnapshot.data,\\n\\t\\t\\t\\t\\t\\tthis.selectedNoteIds,\\n\\t\\t\\t\\t\\t\\tafterNavigatorPop,\\n\\t\\t\\t\\t\\t\\thandleNoteListLongPress,\\n\\t\\t\\t\\t\\t\\thandleNoteListTapAfterSelect,\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t],\\n\\t\\t\\t);\\n\\t\\t} else if (snapshot.hasError) {\\n\\t\\t\\tprint('Error reading database');\\n\\t\\t} else {\\n\\t\\t\\treturn Center(\\n\\t\\t\\t\\tchild: CircularProgressIndicator(\\n\\t\\t\\t\\t\\tbackgroundColor: Color(c3),\\n\\t\\t\\t\\t),\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n),\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here before building the widget we read the data from the database and builds a list of note widgets to display on the Home screen by calling \", _jsx(_components.strong, {\n        children: \"AllNoteLists\"\n      }), \" widget. We also pass different callback functions to \", _jsx(_components.strong, {\n        children: \"AllNoteLists\"\n      }), \" to handles cases like the long selection of note, deselect a note, etc.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Define all these functions inside \", _jsx(_components.strong, {\n        children: \"_Home\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"// Render the screen and update changes\\nvoid afterNavigatorPop() {\\n\\tsetState(() {});\\n}\\n\\n// Long Press handler to display bottom bar\\nvoid handleNoteListLongPress(int id) {\\n\\tsetState(() {\\n\\t\\tif (selectedNoteIds.contains(id) == false) {\\n\\t\\t\\tselectedNoteIds.add(id);\\n\\t\\t}\\n\\t});\\n}\\n\\n// Remove selection after long press\\nvoid handleNoteListTapAfterSelect(int id) {\\n\\tsetState(() {\\n\\t\\tif (selectedNoteIds.contains(id) == true) {\\n\\t\\t\\tselectedNoteIds.remove(id);\\n\\t\\t}\\n\\t});\\n}\\n\\n// Delete Note/Notes\\nvoid handleDelete() async {\\n\\ttry {\\n\\t\\tNotesDatabase notesDb = NotesDatabase();\\n\\t\\tawait notesDb.initDatabase();\\n\\t\\tfor (int id in selectedNoteIds) {\\n\\t\\t\\tint result = await notesDb.deleteNote(id);\\n\\t\\t}\\n\\t\\tawait notesDb.closeDatabase();\\n\\t} catch (e) {\\n\\n\\t} finally {\\n\\t\\tsetState(() {\\n\\t\\t\\tselectedNoteIds = [];\\n\\t\\t});\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Define \", _jsx(_components.strong, {\n        children: \"AllNoteLists\"\n      }), \" widget which gets arguments from parent widget including note data and callback functions to handle\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"// Display all notes\\nclass AllNoteLists extends StatelessWidget {\\n\\tfinal data;\\n\\tfinal selectedNoteIds;\\n\\tfinal afterNavigatorPop;\\n\\tfinal handleNoteListLongPress;\\n\\tfinal handleNoteListTapAfterSelect;\\n\\n\\tAllNoteLists(\\n\\t\\tthis.data, \\n\\t\\tthis.selectedNoteIds,\\n\\t\\tthis.afterNavigatorPop,\\n\\t\\tthis.handleNoteListLongPress,\\n\\t\\tthis.handleNoteListTapAfterSelect,\\n\\t);\\n\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn ListView.builder(\\n\\t\\t\\titemCount: data.length,\\n\\t\\t\\titemBuilder: (context, index) {\\n\\t\\t\\t\\tdynamic item = data[index];\\n\\t\\t\\t\\treturn DisplayNotes(\\n\\t\\t\\t\\t\\titem,\\n\\t\\t\\t\\t\\tselectedNoteIds,\\n\\t\\t\\t\\t\\t(selectedNoteIds.contains(item['id']) == false? false: true),\\n\\t\\t\\t\\t\\tafterNavigatorPop, \\n\\t\\t\\t\\t\\thandleNoteListLongPress,\\n\\t\\t\\t\\t\\thandleNoteListTapAfterSelect,\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t);\\n\\t}\\n}\\n\\n\\n// A Note view showing title, first line of note and color\\nclass DisplayNotes extends StatelessWidget {\\n\\tfinal notesData;\\n\\tfinal selectedNoteIds;\\n\\tfinal selectedNote;\\n\\tfinal callAfterNavigatorPop;\\n\\tfinal handleNoteListLongPress;\\n\\tfinal handleNoteListTapAfterSelect;\\n\\n\\tDisplayNotes(\\n\\t\\tthis.notesData,\\n\\t\\tthis.selectedNoteIds,\\n\\t\\tthis.selectedNote,\\n\\t\\tthis.callAfterNavigatorPop,\\n\\t\\tthis.handleNoteListLongPress,\\n\\t\\tthis.handleNoteListTapAfterSelect,\\n\\t);\\n\\n\\t@override\\n\\tWidget build(BuildContext context) {\\n\\t\\treturn Padding(\\n\\t\\t\\tpadding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 2.0),\\n\\t\\t\\tchild: Material(\\n\\t\\t\\t\\televation: 1,\\n\\t\\t\\t\\tcolor: (selectedNote == false? Color(c1): Color(c8)),\\n\\t\\t\\t\\tclipBehavior: Clip.hardEdge,\\n\\t\\t\\t\\tborderRadius: BorderRadius.circular(5.0),\\n\\t\\t\\t\\tchild: InkWell(\\n\\t\\t\\t\\t\\tonTap: () {\\n\\t\\t\\t\\t\\t\\tif (selectedNote == false) {\\n\\t\\t\\t\\t\\t\\t\\tif (selectedNoteIds.length == 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t// Go to edit screen to update notes\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\thandleNoteListLongPress(notesData['id']);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} \\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\thandleNoteListTapAfterSelect(notesData['id']);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\tonLongPress: () {\\n\\t\\t\\t\\t\\t\\thandleNoteListLongPress(notesData['id']);\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tchild: Container(\\n\\t\\t\\t\\t\\t\\twidth: MediaQuery.of(context).size.width,\\n\\t\\t\\t\\t\\t\\tpadding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8.0),\\n\\t\\t\\t\\t\\t\\tchild: Row(\\n\\t\\t\\t\\t\\t\\t\\tchildren: <Widget>[\\n\\t\\t\\t\\t\\t\\t\\t\\tExpanded(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tflex: 1,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tchild: Column(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmainAxisAlignment: MainAxisAlignment.center,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcrossAxisAlignment: CrossAxisAlignment.center,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmainAxisSize: MainAxisSize.min,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchildren: <Widget>[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tContainer(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\talignment: Alignment.center,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdecoration: BoxDecoration(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor: (selectedNote == false? \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tColor(NoteColors[notesData['noteColor']]['b']):\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tColor(c9)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tshape: BoxShape.circle,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchild: Padding(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tpadding: EdgeInsets.all(10),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchild: (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedNote == false?\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tText(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnotesData['title'][0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstyle: TextStyle(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor: Color(c1),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfontSize: 21,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t):\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tIcon(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tIcons.check,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor: Color(c1),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsize: 21,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tExpanded(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tflex: 5,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tchild: Column(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmainAxisAlignment: MainAxisAlignment.spaceAround,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcrossAxisAlignment: CrossAxisAlignment.start,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmainAxisSize: MainAxisSize.min,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchildren:<Widget>[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tText(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnotesData['title'] != null? notesData['title']: \\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstyle: TextStyle(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor: Color(c3),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfontSize: 18,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfontWeight: FontWeight.bold,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tContainer(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theight: 3,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tText(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnotesData['content'] != null? notesData['content'].split('\\\\n')[0]: \\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstyle: TextStyle(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolor: Color(c7),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfontSize: 16,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfontWeight: FontWeight.w300,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t),\\n\\t\\t\\t),\\n\\t\\t);\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"AllNoteLists\"\n      }), \" builds a list of notes from the Map of a list of notes. In \", _jsx(_components.strong, {\n        children: \"ListView\"\n      }), \" builder it passes each note extracted data to another widget \", _jsx(_components.strong, {\n        children: \"DisplayNotes\"\n      }), \" which represents each note.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now Home screen displays all notes stored as\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"note-app-flutter/notes-app-home-notes-list.jpg\",\n        alt: \"Home screen:=:30\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Long press on the note to select the note. And if a note is selected we can add a delete action to delete the selected notes. Add \", _jsx(_components.strong, {\n        children: \"Delete\"\n      }), \" button at \", _jsx(_components.strong, {\n        children: \"appBar\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"actions\"\n      }), \" which shows delete icon only if any note is selected.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"actions: [\\n\\t(selectedNoteIds.length > 0?\\n\\t\\tIconButton(\\n\\t\\t\\ticon: const Icon(\\n\\t\\t\\t\\tIcons.delete,\\n\\t\\t\\t\\tcolor: const Color(c1),\\n\\t\\t\\t),\\n\\t\\t\\ttooltip: 'Delete',\\n\\t\\t\\tonPressed: () => handleDelete(),\\n\\t\\t):\\n\\t\\tContainer()\\n\\t),\\n],\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Define \", _jsx(_components.strong, {\n        children: \"hanldeDelete()\"\n      }), \" which deletes all selected notes from database.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"// Delete Notes\\nvoid handleDelete() async {\\n\\ttry {\\n\\t\\tNotesDatabase notesDb = NotesDatabase();\\n\\t\\tawait notesDb.initDatabase();\\n\\t\\tfor (int id in selectedNoteIds) {\\n\\t\\t\\tint result = await notesDb.deleteNote(id);\\n\\t\\t}\\n\\t\\tawait notesDb.closeDatabase();\\n\\t} catch (e) {\\n\\t\\tprint('Cannot delete notes');\\n\\t} finally {\\n\\t\\tsetState(() {\\n\\t\\t\\tselectedNoteIds = [];\\n\\t\\t});\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For notes, we have added create, read and delete functions. Now we will add an update function to edit already stored notes.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Update notes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For this, we can use the Edit screen to update the notes as it has all features to create notes which are similar for update notes also. We have to tell the Edit screen which type of notes operations we doing either create or update notes. To inform the Edit screen we can pass arguments to \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" widget while routing about the type of action and notes data if the action is to update. Change \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" widget to accept arguments telling the type of action and necessary data.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"class NotesEdit extends StatefulWidget {\\n\\tfinal args;\\n\\n\\tconst NotesEdit(this.args);\\n\\t_NotesEdit createState() => _NotesEdit();\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"args\"\n      }), \" stores parameters passed from parent widget.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Change navigation arguments for \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" in the floating-action-button in \", _jsx(_components.strong, {\n        children: \"_Home\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"//Floating Button\\nfloatingActionButton: FloatingActionButton(\\n\\tchild: const Icon(\\n\\t\\tIcons.add,\\n\\t\\tcolor: const Color(c5),\\n\\t),\\n\\ttooltip: 'New Notes',\\n\\tbackgroundColor: const Color(c4),\\n\\tonPressed: () {\\n\\t  Navigator.push(\\n\\t  \\tcontext,     \\n\\t    MaterialPageRoute(builder: (context) => NotesEdit(['new', {}])),\\n\\t  );\\n\\t}\\n),\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As floating-button triggers the creation of a new note, we pass argument \", _jsx(_components.strong, {\n        children: \"new\"\n      }), \" to inform \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" that operation in creation of note.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When tapped on a note on the Home screen we navigate to the Edit screen to update the note. For this add navigation from Home to Edit when tapped on the note in \", _jsx(_components.strong, {\n        children: \"DisplayNotes\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"child: InkWell(\\nonTap: () {\\n\\tif (selectedNote == false) {\\n\\t\\tif (selectedNoteIds.length == 0) {\\n\\t\\t\\tNavigator.push(\\n\\t\\t\\t\\tcontext, \\n        MaterialPageRoute(\\n          builder: (context) => NotesEdit(['update', notesData]),\\n        ),\\n\\t\\t\\t).then((dynamic value) {\\n\\t\\t\\t\\t\\tcallAfterNavigatorPop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t);\\n\\t\\t\\treturn;\\t\\t\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\thandleNoteListLongPress(notesData['id']);\\n\\t\\t}\\n\\t} \\n\\telse {\\n\\t\\thandleNoteListTapAfterSelect(notesData['id']);\\n\\t}\\n},\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We pass \", _jsx(_components.strong, {\n        children: \"update\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"notesData\"\n      }), \" to the Edit screen stating the operation is updating notes and note data to fill in the Edit screen.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Change \", _jsx(_components.strong, {\n        children: \"NotesEdit\"\n      }), \" widget in \", _jsx(_components.strong, {\n        children: \"notes_edit.dart\"\n      }), \" for handling update note operation.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dart\",\n        children: \"@override\\nvoid initState() {\\n\\tsuper.initState();\\n\\tnoteTitle = (widget.args[0] == 'new'? '': widget.args[1]['title']);\\n\\tnoteContent = (widget.args[0] == 'new'? '': widget.args[1]['content']);\\n\\tnoteColor = (widget.args[0] == 'new'? 'red': widget.args[1]['noteColor']);\\n\\n\\t_titleTextController.text = (widget.args[0] == 'new'? '': widget.args[1]['title']);\\n\\t_contentTextController.text = (widget.args[0] == 'new'? '': widget.args[1]['content']);\\n\\t_titleTextController.addListener(handleTitleTextChange);\\n\\t_contentTextController.addListener(handleNoteTextChange);\\n}\\n\\nvoid handleBackButton() async {\\n\\tif (noteTitle.length == 0) {\\n\\t\\t// Go Back without saving\\n\\t\\tif (noteContent.length == 0) {\\n\\t\\t\\tNavigator.pop(context);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tString title = noteContent.split('\\\\n')[0];\\n\\t\\t\\tif (title.length > 31) {\\n\\t\\t\\t\\ttitle = title.substring(0, 31);\\n\\t\\t\\t}\\n\\t\\t\\tsetState(() {\\n\\t\\t\\t\\tnoteTitle = title;\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Save New note\\n\\tif (widget.args[0] == 'new') {\\n\\t\\tNote noteObj = Note(\\n\\t\\t\\ttitle: noteTitle, \\n\\t\\t\\tcontent: noteContent, \\n\\t\\t\\tnoteColor: noteColor\\n\\t\\t);\\n\\t\\ttry {\\n\\t\\t\\tawait _insertNote(noteObj);\\n\\t\\t} catch (e) {\\n\\n\\t\\t} finally {\\n\\t\\t\\tNavigator.pop(context);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Update Note\\n\\telse if (widget.args[0] == 'update') {\\n\\t\\tNote noteObj = Note(\\n\\t\\t\\tid: widget.args[1]['id'],\\n\\t\\t\\ttitle: noteTitle, \\n\\t\\t\\tcontent: noteContent, \\n\\t\\t\\tnoteColor: noteColor\\n\\t\\t);\\n\\t\\ttry {\\n\\t\\t\\tawait _updateNote(noteObj);\\n\\t\\t} catch (e) {\\n\\n\\t\\t} finally {\\n\\t\\t\\tNavigator.pop(context);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tapping on the note in the Home screen will take us to the Edit screen to update notes.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"This tutorial addressed how to create a simple note-taking app in Flutter with common operations like create, read, update and delete. We can extend the app to have multiple day-to-day useful features. I hope you will do that to create your own notes app according to your interests and needs.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I have created a full Android working application with additional features like Notes sharing, multi-select notes, deleting notes in the edit screen, sort text in notes, etc. Check out the full code at \", _jsx(_components.a, {\n        href: \"https://github.com/santhalakshminarayana/zehero-note\",\n        children: \"github.com/santhalakshminarayana/zehero-note\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"create-a-notes-app-with-flutter"},"__N_SSG":true}
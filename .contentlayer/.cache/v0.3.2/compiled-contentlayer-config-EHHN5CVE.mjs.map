{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/libs/mdxOptions.mjs", "../../../src/libs/remarks/remarkImgToJsx.mjs", "../../../src/libs/getToc.ts", "../../../src/libs/remarks/remarkTocHeadings.ts"],
  "sourcesContent": ["import {\r\n  defineNestedType,\r\n  defineDocumentType,\r\n  FieldDefs,\r\n  makeSource,\r\n  RawDocumentData,\r\n} from \"contentlayer/source-files\";\r\n\r\nimport mdxOptions from \"./src/libs/mdxOptions.mjs\";\r\n\r\nimport { getToc } from \"./src/libs/getToc\";\r\nimport readingTime from \"reading-time\";\r\n\r\nconst fields: FieldDefs = {\r\n  title: { type: \"string\", required: true },\r\n  description: { type: \"string\", required: true },\r\n  date: { type: \"date\", required: true },\r\n  tags: { type: \"list\", required: true, of: { type: \"string\" } },\r\n  draft: { type: \"boolean\" },\r\n  image: { type: \"string\" },\r\n  icon: { type: \"string\" },\r\n};\r\n\r\nfunction resolveSlug(raw: RawDocumentData) {\r\n  const [, locale, ...rest] = raw.flattenedPath.split(\"/\");\r\n  return { locale, slug: rest.join(\"/\") };\r\n}\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `posts/**/*+(.md|.mdx)`,\r\n  contentType: \"mdx\",\r\n  fields,\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (post) => `/${resolveSlug(post._raw).slug}`,\r\n    },\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (post) => `/${post._raw.flattenedPath}`,\r\n    },\r\n    locale: {\r\n      type: \"enum\",\r\n      options: [\"en\", \"vi\"],\r\n      resolve: (post) => resolveSlug(post._raw).locale,\r\n    },\r\n    readingMinutes: {\r\n      type: \"string\",\r\n      resolve: (post) => Math.ceil(readingTime(post.body.raw).minutes),\r\n    },\r\n    wordCount: {\r\n      type: \"number\",\r\n      resolve: (post) => post.body.raw.split(/\\s+/gu).length,\r\n    },\r\n    toc: {\r\n      type: \"list\",\r\n      resolve: (post) => getToc(post.body.raw),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"content\",\r\n  documentTypes: [Post],\r\n  mdx: {\r\n    remarkPlugins: mdxOptions.remarkPlugins,\r\n    rehypePlugins: mdxOptions.remarkPlugins,\r\n  },\r\n});\r\n", "import rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypeExternalLinks from \"rehype-external-links\";\r\nimport rehypeSlug from \"rehype-slug\";\r\n//import remarkMdxCodeMeta from \"remark-mdx-code-meta\";\r\n\r\n//import remarkAdmonitions from \"./remark/remarkAdmonitions.mjs\";\r\n//import remarkCodeTitles from \"./remark/remarkCodeTitles.mjs\";\r\nimport remarkImgToJsx from \"./remarks/remarkImgToJsx.mjs\";\r\n\r\nimport remarkFrontmatter from \"remark-frontmatter\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport remarkBreaks from \"remark-breaks\";\r\nimport remarkDirective from \"remark-directive\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\n\r\nconst rehypePrettyCodeOptions = {\r\n  theme: \"one-dark-pro\",\r\n  keepBackground: false,\r\n  onVisitLine(node) {\r\n    if (node.children.length === 0) {\r\n      node.children = [{ type: \"text\", value: \" \" }];\r\n    }\r\n  },\r\n  onVisitHighlightedLine(node) {\r\n    node.properties.className.push(\"highlighted\");\r\n  },\r\n  onVisitHighlightedWord(node) {\r\n    node.properties.className = [\"word\"];\r\n  },\r\n};\r\n\r\n\r\nconst mdxOptions = {\r\n  remarkPlugins: [\r\n    remarkFrontmatter,\r\n    remarkGfm,\r\n    remarkBreaks,\r\n    //remarkMdxCodeMeta,\r\n    remarkDirective,\r\n    //remarkAdmonitions,\r\n    //remarkCodeTitles,\r\n    //remarkImgToJsx,\r\n  ],\r\n  rehypePlugins: [\r\n    rehypeExternalLinks,\r\n    rehypeSlug,\r\n    [\r\n      rehypeAutolinkHeadings,\r\n      {\r\n        properties: {\r\n          className: [\"anchor\"],\r\n          ariaLabel: \"anchor\",\r\n        },\r\n      },\r\n    ],\r\n    [rehypePrettyCode, rehypePrettyCodeOptions],\r\n  ],\r\n};\r\n\r\nexport default mdxOptions;\r\n", "import fs from \"fs\";\r\n\r\nimport sizeOf from \"image-size\";\r\nimport { visit } from \"unist-util-visit\";\r\n\r\n// https://github.com/timlrx/tailwind-nextjs-starter-blog/blob/4d6114f8f858cea78574a87a113ddb6a89f8ddce/lib/remark-img-to-jsx.js\r\nexport default function remarkImgToJsx() {\r\n  return (tree) => {\r\n    visit(\r\n      tree,\r\n      // only visit p tags that contain an img element\r\n      (node) =>\r\n        node.type === \"paragraph\" &&\r\n        node.children.some((n) => n.type === \"image\"),\r\n      (node) => {\r\n        const imageNode = node.children.find((n) => n.type === \"image\");\r\n\r\n        // only local files\r\n        if (fs.existsSync(`${process.cwd()}/public${imageNode.url}`)) {\r\n          const dimensions = sizeOf(`${process.cwd()}/public${imageNode.url}`);\r\n\r\n          // Convert original node to next/image\r\n          (imageNode.type = \"mdxJsxFlowElement\"),\r\n            (imageNode.name = \"Image\"),\r\n            (imageNode.attributes = [\r\n              { type: \"mdxJsxAttribute\", name: \"alt\", value: imageNode.alt },\r\n              { type: \"mdxJsxAttribute\", name: \"src\", value: imageNode.url },\r\n              {\r\n                type: \"mdxJsxAttribute\",\r\n                name: \"width\",\r\n                value: dimensions.width,\r\n              },\r\n              {\r\n                type: \"mdxJsxAttribute\",\r\n                name: \"height\",\r\n                value: dimensions.height,\r\n              },\r\n            ]);\r\n\r\n          // Change node type from p to div to avoid nesting error\r\n          node.type = \"div\";\r\n          node.children = [imageNode];\r\n        }\r\n      }\r\n    );\r\n  };\r\n}\r\n", "import { remark } from \"remark\";\r\nimport remarkMdx from \"remark-mdx\";\r\n\r\nimport { Toc } from \"./types\";\r\n\r\nimport remarkTocHeadings from \"./remarks/remarkTocHeadings\";\r\n\r\nexport async function getToc(markdown: string) {\r\n  const toc: Toc = [];\r\n  remark()\r\n    .use(remarkMdx)\r\n    .use(remarkTocHeadings, { exportRef: toc })\r\n    .processSync(markdown);\r\n  return toc;\r\n}\r\n", "// https://github.com/timlrx/tailwind-nextjs-starter-blog/blob/00059a8e7fa5fe400cda3e502201ce65bfe47d7a/lib/remark-toc-headings.js\r\n\r\nimport { slug } from \"github-slugger\";\r\nimport { toString } from \"mdast-util-to-string\";\r\nimport { visit } from \"unist-util-visit\";\r\n\r\nimport { Toc } from \"@/libs/types\";\r\n\r\n// https://github.com/timlrx/tailwind-nextjs-starter-blog/blob/4d6114f8f858cea78574a87a113ddb6a89f8ddce/lib/remark-toc-headings.js\r\nexport default function remarkTocHeadings(options: { exportRef: Toc }) {\r\n  return (tree: any) =>\r\n    visit(tree, \"heading\", (node) => {\r\n      const textContent = toString(node);\r\n      options.exportRef.push({\r\n        value: textContent,\r\n        url: \"#\" + slug(textContent),\r\n        depth: node.depth,\r\n      });\r\n    });\r\n}\r\n"],
  "mappings": "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",
  "names": ["visit"]
}
